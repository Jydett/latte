/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package latte;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.LocalVariableNode;
import org.objectweb.asm.tree.MethodNode;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

class AppTest {
    static String classFile = "HelloWorld.klass";
    static Path inputClassFilePath;
    Path outputClassFilePath;

    @BeforeAll
    static void beforeAll() throws URISyntaxException, IOException {
        inputClassFilePath = Paths.get(AppTest.class.getClassLoader().getResource(classFile).toURI());
    }

    @BeforeEach
    void beforeEach() throws IOException {
        outputClassFilePath = Files.createTempFile(null, ".class");
    }

    @AfterEach
    void afterEach() throws IOException {
        Files.delete(outputClassFilePath);
    }

    @Test
    void testHandleClass() throws IOException {
        TypeVerifier tf = new TypeVerifier();

        assertDoesNotThrow(() -> App.handleClass(inputClassFilePath, outputClassFilePath, true, tf));


        InputStream fi = Files.newInputStream(outputClassFilePath);
        ClassReader cr = new ClassReader(fi);
        ClassNode cn = new ClassNode();
        cr.accept(cn, 0);
        ClassWriter classWriter = new ClassWriter(0);
        cn.accept(classWriter);
        assertEquals(3, cn.methods.size());


        MethodNode method = cn.methods.get(0);
        assertEquals("<init>", method.name);
        assertEquals(1, method.localVariables.size());

        LocalVariableNode local = method.localVariables.get(0);
        assertEquals("this", local.name);
        assertEquals(0, local.index);
        assertEquals(0, local.start.getLabel().getOffset());
        assertEquals(5, local.end.getLabel().getOffset());
        assertEquals("LHelloWorld;", local.desc);
    

        method = cn.methods.get(1);
        assertEquals("main", method.name);
        assertEquals(9, method.localVariables.size());

        local = method.localVariables.get(0);
        assertEquals("arg1", local.name);
        assertEquals(0, local.index);
        assertEquals(0, local.start.getLabel().getOffset());
        assertEquals(69, local.end.getLabel().getOffset());
        assertEquals("[Ljava/lang/String;", local.desc);

        local = method.localVariables.get(1);
        assertEquals("arg2", local.name);
        assertEquals(1, local.index);
        assertEquals(0, local.start.getLabel().getOffset());
        assertEquals(69, local.end.getLabel().getOffset());
        assertEquals("Z", local.desc);

        local = method.localVariables.get(2);
        assertEquals("local1", local.name);
        assertEquals(2, local.index);
        assertEquals(4, local.start.getLabel().getOffset());
        assertEquals(69, local.end.getLabel().getOffset());
        assertEquals("Ljava/io/IOException;", local.desc);

        local = method.localVariables.get(3);
        assertEquals("local2", local.name);
        assertEquals(5, local.index);
        assertEquals(9, local.start.getLabel().getOffset());
        assertEquals(69, local.end.getLabel().getOffset());
        assertEquals("D", local.desc);

        local = method.localVariables.get(4);
        assertEquals("local3", local.name);
        assertEquals(7, local.index);
        assertEquals(18, local.start.getLabel().getOffset());
        assertEquals(69, local.end.getLabel().getOffset());
        assertEquals("Ljava/io/IOException;", local.desc);

        local = method.localVariables.get(5);
        assertEquals("local4", local.name);
        assertEquals(8, local.index);
        assertEquals(27, local.start.getLabel().getOffset());
        assertEquals(42, local.end.getLabel().getOffset());
        assertEquals("Ljava/lang/String;", local.desc);

        local = method.localVariables.get(6);
        assertEquals("local5", local.name);
        assertEquals(3, local.index);
        assertEquals(31, local.start.getLabel().getOffset());
        assertEquals(42, local.end.getLabel().getOffset());
        assertEquals("J", local.desc);

        local = method.localVariables.get(7);
        assertEquals("local6", local.name);
        assertEquals(8, local.index);
        assertEquals(46, local.start.getLabel().getOffset());
        assertEquals(58, local.end.getLabel().getOffset());
        assertEquals("Ljava/lang/Exception;", local.desc);

        local = method.localVariables.get(8);
        assertEquals("local7", local.name);
        assertEquals(8, local.index);
        assertEquals(58, local.start.getLabel().getOffset());
        assertEquals(69, local.end.getLabel().getOffset());
        assertEquals("Ljava/lang/String;", local.desc);
    

        method = cn.methods.get(2);
        assertEquals("foo", method.name);
        assertEquals(5, method.localVariables.size());

        local = method.localVariables.get(0);
        assertEquals("this", local.name);
        assertEquals(0, local.index);
        assertEquals(0, local.start.getLabel().getOffset());
        assertEquals(40, local.end.getLabel().getOffset());
        assertEquals("LHelloWorld;", local.desc);

        local = method.localVariables.get(1);
        assertEquals("arg1", local.name);
        assertEquals(1, local.index);
        assertEquals(0, local.start.getLabel().getOffset());
        assertEquals(40, local.end.getLabel().getOffset());
        assertEquals("J", local.desc);

        local = method.localVariables.get(2);
        assertEquals("arg2", local.name);
        assertEquals(3, local.index);
        assertEquals(0, local.start.getLabel().getOffset());
        assertEquals(40, local.end.getLabel().getOffset());
        assertEquals("D", local.desc);

        local = method.localVariables.get(3);
        assertEquals("local1", local.name);
        assertEquals(5, local.index);
        assertEquals(3, local.start.getLabel().getOffset());
        assertEquals(40, local.end.getLabel().getOffset());
        assertEquals("D", local.desc);

        local = method.localVariables.get(4);
        assertEquals("local2", local.name);
        assertEquals(7, local.index);
        assertEquals(6, local.start.getLabel().getOffset());
        assertEquals(40, local.end.getLabel().getOffset());
        assertEquals("Ljava/lang/String;", local.desc);
    }
}
